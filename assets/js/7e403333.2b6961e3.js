"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[939],{3816:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var n=a(4848),o=a(8453);const r={sidebar_position:4},l="Load data",i={id:"load_data",title:"Load data",description:"The loading part of this library is not the most useful one excepted maybe for the two-way reference loading. Use a simple operator to upload two-way references.",source:"@site/docs/load_data.md",sourceDirName:".",slug:"/load_data",permalink:"/full-metal-weaviate/docs/load_data",draft:!1,unlisted:!1,editUrl:"https://github.com/thedeepengine/full-metal-weaviate/docs/load_data.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Query Data",permalink:"/full-metal-weaviate/docs/query_data"},next:{title:"Data Sample",permalink:"/full-metal-weaviate/docs/data_sample"}},d={},s=[{value:"Load simple attribute",id:"load-simple-attribute",level:2},{value:"Load simple attributes and references",id:"load-simple-attributes-and-references",level:2},{value:"Load simple attributes and unresolved references",id:"load-simple-attributes-and-unresolved-references",level:2},{value:"Load pure reference",id:"load-pure-reference",level:2},{value:"Load two-way reference",id:"load-two-way-reference",level:2},{value:"When Loading an Object",id:"when-loading-an-object",level:3},{value:"When Loading Pure Reference",id:"when-loading-pure-reference",level:3},{value:"Update already existing object",id:"update-already-existing-object",level:2}];function c(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:a}=t;return a||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"load-data",children:"Load data"})}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsx)(t.p,{children:"The loading part of this library is not the most useful one excepted maybe for the two-way reference loading. Use a simple operator to upload two-way references."})}),"\n",(0,n.jsx)(t.p,{children:"Get your metal client and some collections:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"weaviate_client=<your weaviate client>\n\n# if you haven't yet created the sample testing dataset run:\n# get_sample_data(weaviate_client)\n\n# get metal client and collections\nclient_metal=get_metal_client(weaviate_client)\ntechnology=client_metal.get_metal_collection('Technology')\ntechnology_property=client_metal.get_metal_collection('TechnologyProperty')\ncontributor=client_metal.get_metal_collection('Contributor')\n"})}),"\n",(0,n.jsx)(t.h2,{id:"load-simple-attribute",children:"Load simple attribute"}),"\n",(0,n.jsx)(t.p,{children:"Provide as parameter a dict or a list of dict"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"technology=client_metal.get_metal_collection('Technology')\nuuid=technology.metal_load({'name': 'Chroma'}, False)\n"})}),"\n",(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:"Example response"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",children:"[UUID('b0b0f7b2-1a16-4a7f-8a1f-cb6c93db5137')]\n"})})]}),"\n",(0,n.jsx)(t.p,{children:"Or provide multiple objects to load:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"to_load = [{'name': 'Chroma'},{'name': 'Qdrant'}]\ntechnology=client_metal.get_metal_collection('Technology')\nuuid=technology.metal_load(to_load, False)\n"})}),"\n",(0,n.jsx)(t.h2,{id:"load-simple-attributes-and-references",children:"Load simple attributes and references"}),"\n",(0,n.jsx)(t.p,{children:"Provide a dict with the fields and values, again you can provide a list of objects to load multiples objects, you'd have a list of uuids returned:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"technology_property=client_metal.get_metal_collection('TechnologyProperty')\nuuid_target=technology_property.metal_load({'name': 'Hybrid Search'}, False)\nto_load={'name': 'super_db', 'hasProperty': uuid_target}\ntechnology.metal_load(to_load, False)\n"})}),"\n",(0,n.jsx)(t.p,{children:"You can collapse this previous load into something more condensed if your target uuid already exist and you have a query that uniquely identify it.\nRather than first fetching the uuid and then loading your ref, you can directly provide the search query within the load function:"}),"\n",(0,n.jsx)(t.h2,{id:"load-simple-attributes-and-unresolved-references",children:"Load simple attributes and unresolved references"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"to_load={'name': 'milvus', 'hasProperty': 'name=Hybrid Search'}\ntechnology.metal_load(to_load, False)\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"'name=Hybrid Search'"})," is metal query syntax, look at ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"/full-metal-weaviate/docs/query_data",children:"query"})})," if you're not familiar yet with the query syntax."]}),"\n",(0,n.jsx)(t.p,{children:"The system resolves the query to a uuid, if there is a unique match, the object is loaded, if there is more than one match, an exception is raised, asking you to resolve the reference yourself."}),"\n",(0,n.jsx)(t.p,{children:"I am using it a lot when I have normalised data or data with unique ids, most likely on tokenized field as it highly reduces the risks of multiples uuids matching."}),"\n",(0,n.jsx)(t.h2,{id:"load-pure-reference",children:"Load pure reference"}),"\n",(0,n.jsx)(t.p,{children:"if you want to load one or more references between objects:\nYou can use two syntax, array and object"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["as an array provide each ref as an array of 3 values, from_uuid, from_property and to ",(0,n.jsx)(t.code,{children:"[['<uuid>', '<hasRef>', '<uuid>'], ['<uuid>', '<hasRef>', '<uuid>'], ...]"})]}),"\n",(0,n.jsxs)(t.li,{children:["as dict provide for each ref an object like: ",(0,n.jsx)(t.code,{children:"[{from_uuid:<uuid>, from_property: '<hasRef>',to:<uuid>}, {from_uuid:<uuid>, from_property: '<hasRef>',to:<uuid>}, ...]"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"In this example, we use an unresolved uuid for the source and we provide directly a uuid for the target."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"uuid_target=technology_property.metal_load({'name': 'Replica Consistency'}, False)\ntechnology.metal_load(['name=weaviate', 'hasProperty', uuid_target[0]], False)\n"})}),"\n",(0,n.jsx)(t.p,{children:"Check the results:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"technology.q('name=weaviate', 'hasProperty:name')\n"})}),"\n",(0,n.jsx)(t.h2,{id:"load-two-way-reference",children:"Load two-way reference"}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsxs)(t.p,{children:["Loading two-way ref requires to first register opposite relationships using\n",(0,n.jsx)(t.code,{children:"register_opposite"})," method on your collection.",(0,n.jsx)(t.br,{}),"\n","Ex: Technology.metal.register_opposite('hasProperty', 'propertyOf')\nMore details: ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"/full-metal-weaviate/docs/init_metal#register-opposite-relationships",children:"Register opposite relationships"})})]})}),"\n",(0,n.jsx)(t.h3,{id:"when-loading-an-object",children:"When Loading an Object"}),"\n",(0,n.jsxs)(t.p,{children:["Use the operator ",(0,n.jsx)(t.code,{children:"<>"})," to load a two-way reference."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Syntax"}),": ",(0,n.jsx)(t.code,{children:"{'<>reference_name': <uuid>}"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"uuid_target=technology_property.metal_load({'name': 'Sorted Set'}, False)\nto_load=[{'name': 'redis', '<>hasProperty': uuid_target}]\nuuid=technology.metal_load(to_load, False)\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This would load 2 references:\n",(0,n.jsx)(t.code,{children:"redis hasProperty Sorted Set"})," and ",(0,n.jsx)(t.code,{children:"Sorted Set propertyOf redis"})]}),"\n",(0,n.jsx)(t.h3,{id:"when-loading-pure-reference",children:"When Loading Pure Reference"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Syntax"}),": ",(0,n.jsx)(t.code,{children:"[<uuid>, '<>ref_name', <uuid>]"})," or ",(0,n.jsx)(t.code,{children:"{from_uuid:<uuid>, from_property: '<>ref_name',to:<uuid>}"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"uuid_source=technology.metal_load({'name': 'LlamaIndex'}, False)\nuuid_target=technology_property.metal_load({'name': 'Framework'}, False)\ntechnology.metal_load([uuid_source[0], '<>hasProperty', uuid_target[0]], False)\n"})}),"\n",(0,n.jsx)(t.h2,{id:"update-already-existing-object",children:"Update already existing object"}),"\n",(0,n.jsx)(t.p,{children:"Provide the uuid of the object to update along with the attributes and refs to load:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"milvus=technology.q('name=milvus')\nuuid_milvus = milvus[0]['uuid']\ntechnology.metal_load({'uuid': uuid_milvus, 'description': 'open-source vector database'}, False)\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"technology.q('name=milvus', 'description')\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>l,x:()=>i});var n=a(6540);const o={},r=n.createContext(o);function l(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);